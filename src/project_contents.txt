Project Structure:
./favicon.ico
./index.html
./main.ts
./styles.css
app/app-routing.module.ts
app/app.component.css
app/app.component.html
app/app.component.ts
app/app.module.ts
app/hero.service.ts
app/hero.ts
app/in-memory-data.service.ts
app/message.service.ts
app/mock-heroes.ts
app/dashboard/dashboard.component.css
app/dashboard/dashboard.component.html
app/dashboard/dashboard.component.spec.ts
app/dashboard/dashboard.component.ts
app/hero-detail/hero-detail.component.css
app/hero-detail/hero-detail.component.html
app/hero-detail/hero-detail.component.ts
app/hero-search/hero-search.component.css
app/hero-search/hero-search.component.html
app/hero-search/hero-search.component.ts
app/heroes/heroes.component.css
app/heroes/heroes.component.html
app/heroes/heroes.component.ts
app/messages/messages.component.css
app/messages/messages.component.html
app/messages/messages.component.ts

File Contents:
favicon.ico:
``

index.html:
```
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Tour of Heroes</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
</head>
<body>
  <app-root></app-root>
</body>
</html>

```

main.ts:
```
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import { AppModule } from './app/app.module';

platformBrowserDynamic().bootstrapModule(AppModule)
  .catch(err => console.error(err));


```

styles.css:
```
/* Global Styles */
* {
  font-family: Arial, Helvetica, sans-serif;
}
h1 {
  color: #264D73;
  font-size: 2.5rem;
}
h2, h3 {
  color: #444;
  font-weight: lighter;
}
h3 {
  font-size: 1.3rem;
}
body {
  padding: .5rem;
  max-width: 1000px;
  margin: auto;
}
@media (min-width: 600px) {
  body {
    padding: 2rem;
  }
}
body, input[text] {
  color: #333;
  font-family: Cambria, Georgia, serif;
}
a {
  cursor: pointer;
}
button {
  background-color: #eee;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  color: black;
  font-size: 1.2rem;
  padding: 1rem;
  margin-right: 1rem;
  margin-bottom: 1rem;
  margin-top: 1rem;
}
button:hover {
  background-color: black;
  color: white;
}
button:disabled {
  background-color: #eee;
  color: #aaa;
  cursor: auto;
}

/* Navigation link styles */
nav a {
  padding: 5px 10px;
  text-decoration: none;
  margin-right: 10px;
  margin-top: 10px;
  display: inline-block;
  background-color: #e8e8e8;
  color: #3d3d3d;
  border-radius: 4px;
}

nav a:hover {
  color: white;
  background-color:  #42545C;
}
nav a.active {
  background-color: black;
  color: white;
}
hr {
  margin: 1.5rem 0;
}
input[type="text"] {
  box-sizing: border-box;
  width: 100%;
  padding: .5rem;
}

```

app-routing.module.ts:
```
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';

import { DashboardComponent } from './dashboard/dashboard.component';
import { HeroesComponent } from './heroes/heroes.component';
import { HeroDetailComponent } from './hero-detail/hero-detail.component';

const routes: Routes = [
  { path: '', redirectTo: '/dashboard', pathMatch: 'full' },
  { path: 'dashboard', component: DashboardComponent },
  { path: 'detail/:id', component: HeroDetailComponent },
  { path: 'heroes', component: HeroesComponent }
];

@NgModule({
  imports: [ RouterModule.forRoot(routes) ],
  exports: [ RouterModule ]
})
export class AppRoutingModule {}

```

app.component.css:
```
/* AppComponent's private CSS styles */
h1 {
  margin-bottom: 0;
}
nav a {
  padding: 1rem;
  text-decoration: none;
  margin-top: 10px;
  display: inline-block;
  background-color: #e8e8e8;
  color: #3d3d3d;
  border-radius: 4px;
}
nav a:hover {
  color: white;
  background-color: #42545C;
}
nav a.active {
  background-color: black;
}

```

app.component.html:
```
<h1>{{title}}</h1>
<nav>
  <a routerLink="/dashboard">Dashboard</a>
  <a routerLink="/heroes">Heroes</a>
</nav>
<router-outlet></router-outlet>
<app-messages></app-messages>

```

app.component.ts:
```
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'Tour of Heroes';
}

```

app.module.ts:
```
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';

import { HttpClientInMemoryWebApiModule } from 'angular-in-memory-web-api';
import { InMemoryDataService } from './in-memory-data.service';

import { AppRoutingModule } from './app-routing.module';

import { AppComponent } from './app.component';
import { DashboardComponent } from './dashboard/dashboard.component';
import { HeroDetailComponent } from './hero-detail/hero-detail.component';
import { HeroesComponent } from './heroes/heroes.component';
import { HeroSearchComponent } from './hero-search/hero-search.component';
import { MessagesComponent } from './messages/messages.component';

@NgModule({
  imports: [
    BrowserModule,
    FormsModule,
    ReactiveFormsModule,
    AppRoutingModule,
    HttpClientModule,

    // The HttpClientInMemoryWebApiModule module intercepts HTTP requests
    // and returns simulated server responses.
    // Remove it when a real server is ready to receive requests.
    HttpClientInMemoryWebApiModule.forRoot(
      InMemoryDataService, { dataEncapsulation: false }
    )
  ],
  declarations: [
    AppComponent,
    DashboardComponent,
    HeroesComponent,
    HeroDetailComponent,
    MessagesComponent,
    HeroSearchComponent
  ],
  bootstrap: [ AppComponent ]
})
export class AppModule { }

```

hero.service.ts:
```
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';

import { Observable, of } from 'rxjs';
import { catchError, map, tap } from 'rxjs/operators';

import { Hero } from './hero';
import { MessageService } from './message.service';


@Injectable({ providedIn: 'root' })
export class HeroService {

  private heroesUrl = 'api/heroes';  // URL to web api

  httpOptions = {
    headers: new HttpHeaders({ 'Content-Type': 'application/json' })
  };

  constructor(
    private http: HttpClient,
    private messageService: MessageService) { }

  /** GET heroes from the server */
  getHeroes(): Observable<Hero[]> {
    return this.http.get<Hero[]>(this.heroesUrl)
      .pipe(
        tap(_ => this.log('fetched heroes')),
        catchError(this.handleError<Hero[]>('getHeroes', []))
      );
  }

  /** GET hero by id. Return `undefined` when id not found */
  getHeroNo404<Data>(id: number): Observable<Hero> {
    const url = `${this.heroesUrl}/?id=${id}`;
    return this.http.get<Hero[]>(url)
      .pipe(
        map(heroes => heroes[0]), // returns a {0|1} element array
        tap(h => {
          const outcome = h ? 'fetched' : 'did not find';
          this.log(`${outcome} hero id=${id}`);
        }),
        catchError(this.handleError<Hero>(`getHero id=${id}`))
      );
  }

  /** GET hero by id. Will 404 if id not found */
  getHero(id: number): Observable<Hero> {
    const url = `${this.heroesUrl}/${id}`;
    return this.http.get<Hero>(url).pipe(
      tap(_ => this.log(`fetched hero id=${id}`)),
      catchError(this.handleError<Hero>(`getHero id=${id}`))
    );
  }

  /* GET heroes whose name contains search term */
  searchHeroes(term: string): Observable<Hero[]> {
    if (!term.trim()) {
      // if not search term, return empty hero array.
      return of([]);
    }
    return this.http.get<Hero[]>(`${this.heroesUrl}/?name=${term}`).pipe(
      tap(x => x.length ?
         this.log(`found heroes matching "${term}"`) :
         this.log(`no heroes matching "${term}"`)),
      catchError(this.handleError<Hero[]>('searchHeroes', []))
    );
  }

  //////// Save methods //////////

  /** POST: add a new hero to the server */
  addHero(hero: Hero): Observable<Hero> {
    return this.http.post<Hero>(this.heroesUrl, hero, this.httpOptions).pipe(
      tap((newHero: Hero) => this.log(`added hero w/ id=${newHero.id}`)),
      catchError(this.handleError<Hero>('addHero'))
    );
  }

  /** DELETE: delete the hero from the server */
  deleteHero(id: number): Observable<Hero> {
    const url = `${this.heroesUrl}/${id}`;

    return this.http.delete<Hero>(url, this.httpOptions).pipe(
      tap(_ => this.log(`deleted hero id=${id}`)),
      catchError(this.handleError<Hero>('deleteHero'))
    );
  }

  /** PUT: update the hero on the server */
  updateHero(hero: Hero): Observable<any> {
    return this.http.put(this.heroesUrl, hero, this.httpOptions).pipe(
      tap(_ => this.log(`updated hero id=${hero.id}`)),
      catchError(this.handleError<any>('updateHero'))
    );
  }

  /**
   * Handle Http operation that failed.
   * Let the app continue.
   *
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      console.error(error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  /** Log a HeroService message with the MessageService */
  private log(message: string) {
    this.messageService.add(`HeroService: ${message}`);
  }
}

```

hero.ts:
```
export interface Hero {
  id: number;
  name: string;
  power: string;
  level: number;
  origin: string;
  isActive: boolean;
  description: string;
}

```

in-memory-data.service.ts:
```
import { Injectable } from '@angular/core';
import { InMemoryDbService } from 'angular-in-memory-web-api';
import { Hero } from './hero';

@Injectable({
  providedIn: 'root',
})
export class InMemoryDataService implements InMemoryDbService {
  createDb() {
    const heroes = [
      { id: 12, name: 'Dr. Nice', power: 'Healing', level: 5, origin: 'Earth', isActive: true, description: 'A kind doctor with healing abilities' },
      { id: 13, name: 'Bombasto', power: 'Explosion', level: 7, origin: 'Mars', isActive: true, description: 'Creates powerful explosions' },
      { id: 14, name: 'Celeritas', power: 'Speed', level: 8, origin: 'Mercury', isActive: true, description: 'The fastest hero alive' },
      { id: 15, name: 'Magneta', power: 'Magnetism', level: 6, origin: 'Earth', isActive: false, description: 'Controls magnetic fields' },
      { id: 16, name: 'RubberMan', power: 'Elasticity', level: 4, origin: 'Earth', isActive: true, description: 'Can stretch his body to any shape' },
      { id: 17, name: 'Dynama', power: 'Energy', level: 7, origin: 'Jupiter', isActive: true, description: 'Manipulates energy forms' },
      { id: 18, name: 'Dr. IQ', power: 'Intelligence', level: 9, origin: 'Earth', isActive: true, description: 'Super genius with vast knowledge' },
      { id: 19, name: 'Magma', power: 'Fire', level: 6, origin: 'Venus', isActive: false, description: 'Controls fire and heat' },
      { id: 20, name: 'Tornado', power: 'Wind', level: 5, origin: 'Neptune', isActive: true, description: 'Creates powerful wind storms' }
    ];
    return {heroes};
  }

  // Overrides the genId method to ensure that a hero always has an id.
  // If the heroes array is empty,
  // the method below returns the initial number (11).
  // if the heroes array is not empty, the method below returns the highest
  // hero id + 1.
  genId(heroes: Hero[]): number {
    return heroes.length > 0 ? Math.max(...heroes.map(hero => hero.id)) + 1 : 11;
  }
}

```

message.service.ts:
```
import { Injectable } from '@angular/core';

@Injectable({ providedIn: 'root' })
export class MessageService {
  messages: string[] = [];

  add(message: string) {
    this.messages.push(message);
  }

  clear() {
    this.messages = [];
  }
}

```

mock-heroes.ts:
```
import { Hero } from './hero';

export const HEROES: Hero[] = [
  { id: 12, name: 'Dr. Nice' },
  { id: 13, name: 'Bombasto' },
  { id: 14, name: 'Celeritas' },
  { id: 15, name: 'Magneta' },
  { id: 16, name: 'RubberMan' },
  { id: 17, name: 'Dynama' },
  { id: 18, name: 'Dr. IQ' },
  { id: 19, name: 'Magma' },
  { id: 20, name: 'Tornado' }
];

```

dashboard.component.css:
```
/* DashboardComponent's private CSS styles */

h2 {
  text-align: center;
}

.heroes-menu {
  padding: 0;
  margin: auto;
  max-width: 1000px;

  /* flexbox */
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: space-around;
  align-content: flex-start;
  align-items: flex-start;
}

a {
  background-color: #3f525c;
  border-radius: 2px;
  padding: 1rem;
  font-size: 1.2rem;
  text-decoration: none;
  display: inline-block;
  color: #fff;
  text-align: center;
  width: 100%;
  min-width: 70px;
  margin: .5rem auto;
  box-sizing: border-box;

  /* flexbox */
  order: 0;
  flex: 0 1 auto;
  align-self: auto;
}

@media (min-width: 600px) {
  a {
    width: 18%;
    box-sizing: content-box;
  }
}

a:hover {
  background-color: black;
}

```

dashboard.component.html:
```
<h2>Top Heroes</h2>
<div class="heroes-menu">
  <a *ngFor="let hero of heroes"
      routerLink="/detail/{{hero.id}}">
      {{hero.name}}
  </a>
</div>

<app-hero-search></app-hero-search>

```

dashboard.component.spec.ts:
```
import {ComponentFixture, TestBed, waitForAsync} from '@angular/core/testing';
import {RouterModule} from '@angular/router';
import {of} from 'rxjs';

import {HeroSearchComponent} from '../hero-search/hero-search.component';
import {HeroService} from '../hero.service';
import {HEROES} from '../mock-heroes';

import {DashboardComponent} from './dashboard.component';

describe('DashboardComponent', () => {
  let component: DashboardComponent;
  let fixture: ComponentFixture<DashboardComponent>;
  let heroService;
  let getHeroesSpy: jasmine.Spy;

  beforeEach(waitForAsync(() => {
    heroService = jasmine.createSpyObj('HeroService', ['getHeroes']);
    getHeroesSpy = heroService.getHeroes.and.returnValue(of(HEROES));
    TestBed
        .configureTestingModule({
          declarations: [DashboardComponent, HeroSearchComponent],
          imports: [RouterModule.forRoot([])],
          providers: [
            {provide: HeroService, useValue: heroService},
          ]
        })
        .compileComponents();

    fixture = TestBed.createComponent(DashboardComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  }));

  it('should be created', () => {
    expect(component).toBeTruthy();
  });

  it('should display "Top Heroes" as headline', () => {
    expect(fixture.nativeElement.querySelector('h2').textContent).toEqual('Top Heroes');
  });

  it('should call heroService', waitForAsync(() => {
       expect(getHeroesSpy.calls.any()).toBe(true);
     }));

  it('should display 4 links', waitForAsync(() => {
       expect(fixture.nativeElement.querySelectorAll('a').length).toEqual(4);
     }));
});

```

dashboard.component.ts:
```
import { Component, OnInit } from '@angular/core';
import { Hero } from '../hero';
import { HeroService } from '../hero.service';

@Component({
  selector: 'app-dashboard',
  templateUrl: './dashboard.component.html',
  styleUrls: [ './dashboard.component.css' ]
})
export class DashboardComponent implements OnInit {
  heroes: Hero[] = [];

  constructor(private heroService: HeroService) { }

  ngOnInit(): void {
    this.getHeroes();
  }

  getHeroes(): void {
    this.heroService.getHeroes()
      .subscribe(heroes => this.heroes = heroes.slice(1, 5));
  }
}

```

hero-detail.component.css:
```
/* HeroDetailComponent's private CSS styles */
label {
  color: #435960;
  font-weight: bold;
  display: block;
  margin-bottom: 0.5em;
}

.form-group {
  margin-bottom: 1.5em;
}

input, select, textarea {
  padding: 0.5em;
  font-size: 1em;
  width: 100%;
  max-width: 500px;
  box-sizing: border-box;
  border: 1px solid #ccc;
  border-radius: 4px;
}

input[type="checkbox"] {
  width: auto;
  margin-right: 0.5em;
}

.checkbox {
  display: flex;
  align-items: center;
}

.error {
  color: #d9534f;
  font-size: 0.85em;
  margin-top: 0.25em;
}

.button-group {
  margin-top: 1.5em;
  display: flex;
  gap: 1em;
}

button {
  padding: 0.5em 1em;
  background-color: #eee;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 1em;
}

button:hover {
  background-color: #cfd8dc;
}

button:disabled {
  background-color: #eee;
  color: #aaa;
  cursor: not-allowed;
}

button[type="submit"] {
  background-color: #3f525c;
  color: white;
}

button[type="submit"]:hover:not([disabled]) {
  background-color: #1f2b33;
}

```

hero-detail.component.html:
```
<div *ngIf="hero">
  <h2>{{hero.name | uppercase}} Details</h2>
  <!-- LAB 2 начало-->
  <form [formGroup]="heroForm" (ngSubmit)="save()">
    <div class="form-group">
      <label for="hero-id">ID:</label>
      <input id="hero-id" formControlName="id" readonly />
    </div>

    <div class="form-group">
      <label for="hero-name">Hero name:</label>
      <input id="hero-name" formControlName="name" placeholder="Hero name"/>
      <div *ngIf="heroForm.get('name')?.invalid && (heroForm.get('name')?.dirty || heroForm.get('name')?.touched)" class="error">
        <div *ngIf="heroForm.get('name')?.errors?.['required']">Name is required.</div>
        <div *ngIf="heroForm.get('name')?.errors?.['minlength']">Name must be at least 3 characters long.</div>
      </div>
    </div>

    <div class="form-group">
      <label for="hero-power">Power:</label>
      <select id="hero-power" formControlName="power">
        <option value="">Choose a power</option>
        <option *ngFor="let power of powers" [value]="power">{{power}}</option>
      </select>
      <div *ngIf="heroForm.get('power')?.invalid && (heroForm.get('power')?.dirty || heroForm.get('power')?.touched)" class="error">
        <div *ngIf="heroForm.get('power')?.errors?.['required']">Power is required.</div>
      </div>
    </div>

    <div class="form-group">
      <label for="hero-level">Power level:</label>
      <input id="hero-level" type="number" formControlName="level" min="1" max="10"/>
      <div *ngIf="heroForm.get('level')?.invalid && (heroForm.get('level')?.dirty || heroForm.get('level')?.touched)" class="error">
        <div *ngIf="heroForm.get('level')?.errors?.['required']">Level is required.</div>
        <div *ngIf="heroForm.get('level')?.errors?.['min']">Level must be at least 1.</div>
        <div *ngIf="heroForm.get('level')?.errors?.['max']">Level cannot exceed 10.</div>
      </div>
    </div>

    <div class="form-group">
      <label for="hero-origin">Origin:</label>
      <select id="hero-origin" formControlName="origin">
        <option value="">Choose an origin</option>
        <option *ngFor="let origin of origins" [value]="origin">{{origin}}</option>
      </select>
      <div *ngIf="heroForm.get('origin')?.invalid && (heroForm.get('origin')?.dirty || heroForm.get('origin')?.touched)" class="error">
        <div *ngIf="heroForm.get('origin')?.errors?.['required']">Origin is required.</div>
      </div>
    </div>

    <div class="form-group">
      <label for="hero-active">Active status:</label>
      <div class="checkbox">
        <input id="hero-active" type="checkbox" formControlName="isActive"/>
        <span>Hero is currently active</span>
      </div>
    </div>

    <div class="form-group">
      <label for="hero-description">Description:</label>
      <textarea id="hero-description" formControlName="description" rows="4"></textarea>
      <div *ngIf="heroForm.get('description')?.invalid && (heroForm.get('description')?.dirty || heroForm.get('description')?.touched)" class="error">
        <div *ngIf="heroForm.get('description')?.errors?.['required']">Description is required.</div>
        <div *ngIf="heroForm.get('description')?.errors?.['maxlength']">Description cannot exceed 200 characters.</div>
      </div>
    </div>

    <div class="button-group">
      <button type="button" (click)="goBack()">Go back</button>
      <button type="submit" [disabled]="heroForm.invalid">Save</button>
    </div>
  </form>
</div>
<!-- LAB 2 конец-->

```

hero-detail.component.ts:
```
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { Location } from '@angular/common';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

import { Hero } from '../hero';
import { HeroService } from '../hero.service';

@Component({
  selector: 'app-hero-detail',
  templateUrl: './hero-detail.component.html',
  styleUrls: [ './hero-detail.component.css' ]
})
export class HeroDetailComponent implements OnInit {
  hero: Hero | undefined;
  heroForm!: FormGroup;
  powers: string[] = ['Speed', 'Strength', 'Intelligence', 'Healing', 'Flight', 'Energy', 'Magnetism', 'Telekinesis', 'Invisibility', 'Fire', 'Ice'];
  origins: string[] = ['Earth', 'Mars', 'Jupiter', 'Venus', 'Mercury', 'Neptune', 'Unknown'];

  constructor(
    private route: ActivatedRoute,
    private heroService: HeroService,
    private location: Location,
    private fb: FormBuilder
  ) {}

  ngOnInit(): void {
    this.getHero();
    this.createForm();
  }

  createForm(): void {
    this.heroForm = this.fb.group({
      id: [{value: '', disabled: true}],
      name: ['', [Validators.required, Validators.minLength(3)]],
      power: ['', Validators.required],
      level: [1, [Validators.required, Validators.min(1), Validators.max(10)]],
      origin: ['', Validators.required],
      isActive: [true],
      description: ['', [Validators.required, Validators.maxLength(200)]]
    });
  }

  getHero(): void {
    const id = parseInt(this.route.snapshot.paramMap.get('id')!, 10);
    this.heroService.getHero(id)
      .subscribe(hero => {
        this.hero = hero;
        this.heroForm.patchValue({
          id: hero.id,
          name: hero.name,
          power: hero.power,
          level: hero.level,
          origin: hero.origin,
          isActive: hero.isActive,
          description: hero.description
        });
      });
  }

  goBack(): void {
    this.location.back();
  }

  save(): void {
    if (this.heroForm.valid && this.hero) {
      const formModel = this.heroForm.value;
      
      this.hero.name = formModel.name;
      this.hero.power = formModel.power;
      this.hero.level = formModel.level;
      this.hero.origin = formModel.origin;
      this.hero.isActive = formModel.isActive;
      this.hero.description = formModel.description;
      
      this.heroService.updateHero(this.hero)
        .subscribe(() => this.goBack());
    }
  }
}

```

hero-search.component.css:
```
/* HeroSearch private styles */

label {
  display: block;
  font-weight: bold;
  font-size: 1.2rem;
  margin-top: 1rem;
  margin-bottom: .5rem;

}
input {
  padding: .5rem;
  width: 100%;
  max-width: 600px;
  box-sizing: border-box;
  display: block;
}

input:focus {
  outline: #336699 auto 1px;
}

li {
  list-style-type: none;
}
.search-result li a {
  border-bottom: 1px solid gray;
  border-left: 1px solid gray;
  border-right: 1px solid gray;
  display: inline-block;
  width: 100%;
  max-width: 600px;
  padding: .5rem;
  box-sizing: border-box;
  text-decoration: none;
  color: black;
}

.search-result li a:hover {
  background-color: #435A60;
  color: white;
}

ul.search-result {
  margin-top: 0;
  padding-left: 0;
}

```

hero-search.component.html:
```
<div id="search-component">
  <label for="search-box">Hero Search</label>
  <input #searchBox id="search-box" (input)="search(searchBox.value)" />

  <ul class="search-result">
    <li *ngFor="let hero of heroes$ | async" >
      <a routerLink="/detail/{{hero.id}}">
        {{hero.name}}
      </a>
    </li>
  </ul>
</div>

```

hero-search.component.ts:
```
import { Component, OnInit } from '@angular/core';

import { Observable, Subject } from 'rxjs';

import {
   debounceTime, distinctUntilChanged, switchMap
 } from 'rxjs/operators';

import { Hero } from '../hero';
import { HeroService } from '../hero.service';

@Component({
  selector: 'app-hero-search',
  templateUrl: './hero-search.component.html',
  styleUrls: [ './hero-search.component.css' ]
})
export class HeroSearchComponent implements OnInit {
  heroes$!: Observable<Hero[]>;
  private searchTerms = new Subject<string>();

  constructor(private heroService: HeroService) {}

  // Push a search term into the observable stream.
  search(term: string): void {
    this.searchTerms.next(term);
  }

  ngOnInit(): void {
    this.heroes$ = this.searchTerms.pipe(
      // wait 300ms after each keystroke before considering the term
      debounceTime(300),

      // ignore new term if same as previous term
      distinctUntilChanged(),

      // switch to new search observable each time the term changes
      switchMap((term: string) => this.heroService.searchHeroes(term)),
    );
  }
}

```

heroes.component.css:
```
/* HeroesComponent's private CSS styles */
.heroes {
  margin: 0 0 2em 0;
  list-style-type: none;
  padding: 0;
  width: 15em;
}

input {
  display: block;
  width: 100%;
  padding: .5rem;
  margin: 1rem 0;
  box-sizing: border-box;
}

.heroes li {
  position: relative;
  cursor: pointer;
}

.heroes li:hover {
  left: .1em;
}

.heroes a {
  color: #333;
  text-decoration: none;
  background-color: #EEE;
  margin: .5em;
  padding: .3em 0;
  height: 1.6em;
  border-radius: 4px;
  display: block;
  width: 100%;
}

.heroes a:hover {
  color: #2c3a41;
  background-color: #e6e6e6;
}

.heroes a:active {
  background-color: #525252;
  color: #fafafa;
}

.heroes .badge {
  display: inline-block;
  font-size: small;
  color: white;
  padding: 0.8em 0.7em 0 0.7em;
  background-color: #405061;
  line-height: 1em;
  position: relative;
  left: -1px;
  top: -4px;
  height: 1.8em;
  min-width: 16px;
  text-align: right;
  margin-right: .8em;
  border-radius: 4px 0 0 4px;
}

.add-button {
 padding: .5rem 1.5rem;
 font-size: 1rem;
 margin-bottom: 2rem;
}

.add-button:hover {
  color: white;
  background-color: #42545C;
}

button.delete {
  position: absolute;
  left: 210px;
  top: 5px;
  background-color: white;
  color:  #525252;
  font-size: 1.1rem;
  margin: 0;
  padding: 1px 10px 3px 10px;
}

button.delete:hover {
  background-color: #525252;
  color: white;
}

```

heroes.component.html:
```
<h2>My Heroes</h2>

<div>
  <label for="new-hero">Hero name: </label>
  <input id="new-hero" #heroName />

  <!-- (click) passes input value to add() and then clears the input -->
  <button type="button" class="add-button" (click)="add(heroName.value); heroName.value=''">
    Add hero
  </button>
</div>

<ul class="heroes">
  <li *ngFor="let hero of heroes">
    <a routerLink="/detail/{{hero.id}}">
      <span class="badge">{{hero.id}}</span> {{hero.name}}
    </a>
    <button type="button" class="delete" title="delete hero"
      (click)="delete(hero)">x</button>
  </li>
</ul>

```

heroes.component.ts:
```
import { Component, OnInit } from '@angular/core';

import { Hero } from '../hero';
import { HeroService } from '../hero.service';

@Component({
  selector: 'app-heroes',
  templateUrl: './heroes.component.html',
  styleUrls: ['./heroes.component.css']
})
export class HeroesComponent implements OnInit {
  heroes: Hero[] = [];

  constructor(private heroService: HeroService) { }

  ngOnInit(): void {
    this.getHeroes();
  }

  getHeroes(): void {
    this.heroService.getHeroes()
    .subscribe(heroes => this.heroes = heroes);
  }

  add(name: string): void {
    name = name.trim();
    if (!name) { return; }
    this.heroService.addHero({ name } as Hero)
      .subscribe(hero => {
        this.heroes.push(hero);
      });
  }

  delete(hero: Hero): void {
    this.heroes = this.heroes.filter(h => h !== hero);
    this.heroService.deleteHero(hero.id).subscribe();
  }

}

```

messages.component.css:
```
/* MessagesComponent's private CSS styles */
h2 {
  color: #A80000;
  font-family: Arial, Helvetica, sans-serif;
  font-weight: lighter;
}

.clear {
  color: #333;
  background-color: #eee;
  margin-bottom: 12px;
  padding: 1rem;
  border-radius: 4px;
  font-size: 1rem;
}
.clear:hover {
  color: #fff;
  background-color: #42545C;
}

```

messages.component.html:
```
<div *ngIf="messageService.messages.length">

  <h2>Messages</h2>
  <button type="button"
          class="clear"
          (click)="messageService.clear()">Clear messages</button>
  <div *ngFor='let message of messageService.messages'> {{message}} </div>

</div>

```

messages.component.ts:
```
import { Component } from '@angular/core';
import { MessageService } from '../message.service';

@Component({
  selector: 'app-messages',
  templateUrl: './messages.component.html',
  styleUrls: ['./messages.component.css']
})
export class MessagesComponent {

  constructor(public messageService: MessageService) {}

}

```
